//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "questions")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub title: String,
    pub content: String,
    #[sea_orm(column_type = "Text", json_type = "Vec<String>")]
    pub tags: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::answer::Entity")]
    Answers,
}

impl Related<super::answer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Answers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    // Helper method to get tags as a Vec<String>
    pub fn get_tags(&self) -> Vec<String> {
        serde_json::from_str(&self.tags).unwrap_or_default()
    }

    // Helper method to set tags from a Vec<String>
    pub fn set_tags(tags: Vec<String>) -> String {
        serde_json::to_string(&tags).unwrap_or_else(|_| "[]".to_string())
    }
}

#[derive(Serialize)]
pub struct QuestionResponse {
    id: i32,
    title: String,
    content: String,
    tags: Vec<String>,
    created_at: DateTimeUtc,
    updated_at: DateTimeUtc,
}

impl From<Model> for QuestionResponse {
    fn from(model: Model) -> Self {
        let tags = model.get_tags();
        
        Self {
            id: model.id,
            title: model.title,
            content: model.content,
            tags, // Deserialize JSON string here
            created_at: model.created_at,
            updated_at: model.updated_at,
        }
    }
}